# vouch config

# you should probably start with one of the other configs in the example directory
# vouch proxy does a fairly good job of setting its config to sane defaults

# be aware of your indentation, the only top level elements are `vouch` and `oauth`.

vouch:
  # logLevel: debug
  logLevel: info

  # testing - force all 302 redirects to be rendered as a webpage with a link
  # if you're having problems, turn on testing
  testing: false

  listen: 0.0.0.0
  port: 9090

  # domains -
  # each of these domains must serve the url https://vouch.$domains[0] https://vouch.$domains[1] ...
  # so that the cookie which stores the JWT can be set in the relevant domain
  # you usually *don't* want to list every individual website that will be protected
  # if you have siteA.internal.yourdomain.com and siteB.internal.yourdomain.com
  # then your domains should be set as yourdomain.com or perhaps internal.yourdomain.com
  # usually you'll just have one.
  # Comment `domains:` out if you set allowAllUser:true
  domains:
  - lakelady.fr
  - localhost
  - lumenai.fr

  # set allowAllUsers: true to use Vouch Proxy to just accept anyone who can authenticate at the configured provider
  # allowAllUsers: true

  # Setting publicAccess: true will accept all requests, even without a cookie.
  # If the user is logged in, the cookie will be validated and the user header will be set.
  # You will need to direct people to the Vouch Proxy login page from your application.
  publicAccess: true

  # whiteList - (optional) allows only the listed usernames
  # usernames are usually email addresses (google, most oidc providers) or login/username for github and github enterprise
  # whiteList:
  # - bob@yourdomain.com
  # - alice@yourdomain.com
  # - joe@yourdomain.com

  jwt:
    # secret - a random string used to cryptographically sign the jwt
    # Vouch Proxy complains if the string is less than 44 characters (256 bits as 32 base64 bytes)
    # if the secret is not set here then..
    # look for the secret in `./config/secret`
    # if `./config/secret` doesn't exist then randomly generate a secret and store it there
    # in order to run multiple instances of vouch on multiple servers (perhaps purely for validating the jwt),
    # you'll want them all to have the same secret
    # secret: your_random_string
    issuer: Clusauth
    # number of minutes until jwt expires
    maxAge: 180
    # compress the jwt
    compress: true

  cookie:
    # name of cookie to store the jwt
    name: ClusauthCookie
    # optionally force the domain of the cookie to set
    domain: lakelady.fr
    secure: true
    httpOnly: true
    # Set cookie maxAge to 0 to delete the cookie every time the browser is closed.
    maxAge: 14400
    # Set SameSite attribute to restrict browser behaviour browser to send this cookie along with cross-site requests.
    # Possible attribute values lax, strict, none.
    # If attribute not specified then cross-site behaviour will depend on the browser used. If sameSite=none then secure must be set to true
    # More context: https://github.com/vouch/vouch-proxy/issues/210
    # sameSite: lax

  # session:
    # name of session variable stored locally
    # name: ClusauthSession
    # key - a cryptographic string used to store the session variable
    # if the key is not set here then it is generated at startup and stored in memory
    # Vouch Proxy complains if the string is less than 44 characters (256 bits as 32 base64 bytes)
    # you only want to set this if you're running multiple user facing vouch.yourdomain.com instances
    # key: you_random_key


  headers:
    # jwt: X-Clusauth-Token
    querystring: access_token
    redirect: X-Clusauth-Requested-URI # redirect uri
    user: X-Clusauth-User # user email
    # success: X-Clusauth-Success # success header

    # GENERAL WARNING ABOUT claims AND tokens
    # all of these config elements can cause performance impacts due to the amount of information being
    # moved around.  They will get added to the Vouch cookie and (possibly) make it large.  The Vouch cookie will
    # get split up into several cookies. Every request will process the cookies in order to extract and create the
    # additional headers which get returned.  But if you need it, you need it.
    # With large cookies and headers it will require additional nginx config to open up the buffers a bit..
    # see `large_client_header_buffers` http://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers
    # and `proxy_buffer_size` http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size

    # claims - a list of claims that will be stored in the JWT and passed down to applications via headers
    # By default claims are sent down as headers with a prefix of X-Vouch-IdP-Claims-ClaimKey
    # Only when a claim is found in the user's info will the header exist.  This is optional.  These are case sensitive.
    # claims:
    #   - groups
    #   - given_name
    # these will result in two headers being passed back to nginx
    # X-Vouch-IdP-Claims-Groups
    # X-Vouch-IdP-Claims-Given-Name
    # see https://github.com/vouch/vouch-proxy/issues/183 regarding claims and header naming

    # claimheader - Customizable claim header prefix (instead of default `X-Vouch-IdP-Claims-`)
    # claimheader: My-Custom-Claim-Prefix

    # accesstoken - Pass the user's access token from the provider.  This is useful if you need to pass the IdP token to a downstream
    # application. This is optional.
    # accesstoken: X-Vouch-Access-Token
    # idtoken - Pass the user's Id token from the provider.  This is useful if you need to pass this token to a downstream
    # application. This is optional.
    # idtoken: X-Vouch-IdP-IdToken

  # test_url - add this URL to the page which vouch displays
  # test_url: https://lakelady.fr

oauth:
  provider: oidc
  client_id: LhlrgfKRb8HdmyBH3VJ0J3yH5weHCFz3
  client_secret: p7Zmjym9tM8lAo5eQEQwDJ3TjrkwlLLYsvQ42WDAFCyKKipiyqp6GTKyAtodW3Lz
  auth_url: https://lumenai.eu.auth0.com/authorize
  token_url: https://lumenai.eu.auth0.com/oauth/token
  user_info_url: https://lumenai.eu.auth0.com/userinfo
  scopes:
    - openid
    - email
    - profile
  # Set the callback URL to the domain that Vouch is running on
  callback_url: https://auth.lumenai.fr/auth
